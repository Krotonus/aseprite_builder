name: Build and deploy Aseprite

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - master

env:
  BUILD_TYPE: Release

jobs:
  check-version:
    name: Check latest Aseprite release
    runs-on: ubuntu-latest
    outputs:
      download_url: ${{ steps.version_info.outputs.download_url }}
      latest_tag: ${{ steps.version_info.outputs.latest_tag }}
      should_build: ${{ steps.should_build.outputs.should_build }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Get latest version info
      id: version_info
      run: |
        data=$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/latest)
        LATEST_TAG=$(echo "${data}" | jq -r '.tag_name')
        # Assuming the first asset is the source code zip
        DOWNLOAD_URL=$(echo "${data}" | jq -r '.assets[0].browser_download_url')
        VERSION_INFO=$(echo "${data}" | jq -r '.body')

        # Create a file with the latest tag name. This file will be used for caching.
        echo "${LATEST_TAG}" > latest_aseprite_tag.txt

        # Set outputs using environment file
        echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
        echo "download_url=${DOWNLOAD_URL}" >> $GITHUB_OUTPUT
        echo "version_info=${VERSION_INFO}" >> $GITHUB_OUTPUT

    - name: Load version from cache
      id: version_check
      # Use a consistent path for the cache file
      uses: actions/cache@v4
      with:
        path: latest_aseprite_tag.txt # Cache the consistent filename
        key: aseprite-cached-version-${{ steps.version_info.outputs.latest_tag }} # Use the tag in the key
        restore-keys: |
          aseprite-cached-version- # Fallback key

    - name: Should we start new build?
      id: should_build
      # If the cache-hit is NOT true, it means this tag hasn't been cached before
      if: steps.version_check.outputs.cache-hit != 'true'
      run: |
        # Set output using environment file
        echo "should_build=true" >> $GITHUB_OUTPUT
      # If cache hit, should_build output is not set, defaulting to false/empty

    - name: Create Release
      id: create_release
      if: steps.should_build.outputs.should_build == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version_info.outputs.latest_tag }}
        release_name: Release Aseprite ${{ steps.version_info.outputs.latest_tag }}
        body: |
          ${{ steps.version_info.outputs.version_info }}
        draft: true
        prerelease: false

  build-aseprite:
    name: Build Aseprite
    needs: check-version
    if: ${{ needs.check-version.outputs.should_build == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
          os: [windows-latest, ubuntu-latest, macOS-latest] # Included all OS as before
        fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set OS specific variables
        id: os_vars
        run: |
          case ${{ matrix.os }} in
            windows-latest)
              OS_NAME=Windows
              SKIA_DIR_SUFFIX=Release-x64
              ;;
            ubuntu-latest)
              OS_NAME=Linux
              SKIA_DIR_SUFFIX=Release-x64
              ;;
            macOS-latest)
              OS_NAME=Darwin
              SKIA_DIR_SUFFIX=Release-x64
              ;;
            *)
              echo "Unknown OS"
              exit 1
              ;;
          esac
          echo "OS_NAME=${OS_NAME}" >> $GITHUB_OUTPUT
          echo "SKIA_DIR_SUFFIX=${SKIA_DIR_SUFFIX}" >> $GITHUB_OUTPUT # Not strictly needed here as it's hardcoded, but good pattern

      - name: Install dependencies
        run: |
          case ${{ matrix.os }} in
            windows-latest)
              # Using actions for Ninja and VS environment setup
              echo "Installing Windows dependencies..."
              ;;
            ubuntu-latest)
              echo "Installing Ubuntu dependencies..."
              sudo apt update
              sudo apt install -y cmake ninja-build libxcursor-dev libxi-dev libgl1-mesa-dev
              ;;
            macOS-latest)
              echo "Installing macOS dependencies..."
              brew update
              brew install ninja p7zip
              ;;
            *)
              echo "Unknown OS for dependency installation"
              exit 1
              ;;
          esac

      # Use dedicated actions for Windows setup instead of manual commands and VsDevCmd.bat
      - name: (Windows) Setup Ninja
        if: matrix.os == 'windows-latest'
        uses: seanmiddleditch/gha-setup-ninja@v1

      - name: (Windows) Setup Visual Studio Environment
        if: matrix.os == 'windows-latest'
        uses: seanmiddleditch/gha-setup-vsdevenv@v1
        with:
          # Adjust the version and edition based on what's available on the runner
          vs-version: 2019
          vs-edition: Enterprise
          arch: x64

      - name: Get Skia from cache
        id: skia-cache
        uses: actions/cache@v4
        with:
          path: skia
          key: skia-${{ matrix.os }}-m81-b607b32047 # Include Skia version in key
          restore-keys: |
            skia-${{ matrix.os }}-

      - name: Download Skia if not in cache
        if: steps.skia-cache.outputs.cache-hit != 'true'
        run: |
          SKIA_OS_NAME=${{ steps.os_vars.outputs.OS_NAME }}
          echo "Downloading Skia for ${SKIA_OS_NAME}..."
          curl -o Skia-${SKIA_OS_NAME}-Release-X64.zip -L https://github.com/aseprite/skia/releases/download/m81-b607b32047/Skia-${SKIA_OS_NAME}-Release-X64.zip
          unzip Skia-${SKIA_OS_NAME}-Release-X64.zip -d skia

      - name: Download Aseprite release source
        run: |
          echo "Downloading Aseprite source..."
          curl -o Aseprite-source.zip -L ${{ needs.check-version.outputs.download_url }}
          unzip Aseprite-source.zip -d aseprite
          mkdir -p aseprite/build

      - name: Run CMake
        working-directory: aseprite/build
        # Use bash as the default shell where possible
        shell: bash
        run: |
          SKIA_OS_NAME=${{ steps.os_vars.outputs.OS_NAME }}
          SKIA_LIB_DIR="../../skia/out/${{ steps.os_vars.outputs.SKIA_DIR_SUFFIX }}"

          CMAKE_COMMON_ARGS="-DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DLAF_BACKEND=skia -DSKIA_DIR=../../skia -DSKIA_LIBRARY_DIR=${SKIA_LIB_DIR} -G Ninja .."

          case ${{ matrix.os }} in
            windows-latest)
              # Add Windows-specific flags
              cmake ${CMAKE_COMMON_ARGS} -DCMAKE_IGNORE_PATH='C:/ProgramData/chocolatey/bin/;C:/Strawberry/c/bin/'
              ;;
            ubuntu-latest)
              # Add Ubuntu-specific flags
              cmake ${CMAKE_COMMON_ARGS}
              ;;
            macOS-latest)
              # Add macOS-specific flags
              cmake ${CMAKE_COMMON_ARGS} -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -DCMAKE_OSX_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk
              ;;
            *)
              echo "Unknown OS for CMake configuration"
              exit 1
              ;;
          esac

      - name: Run Ninja
        working-directory: aseprite/build
        run: ninja aseprite

      - name: Clean up build
        working-directory: aseprite/build/bin
        shell: bash
        # Use grep -v to list files NOT matching the patterns and then xargs rm
        # This is safer than a direct rm with wildcards which might fail if no matches
        run: |
          ls | grep -v -e '^gen$' -e '^modp_b64_gen$' -e '^gen\.exe$' -e '^gen\.exe\.manifest$' -e '^modp_b64_gen\.exe$' -e '^modp_b64_gen\.exe\.manifest$' | xargs rm -f
        # Alternative using find: find . ! \( -name 'gen*' -o -name 'modp_b64_gen*' \) -delete

      - name: (Windows) Make portable zip
        if: matrix.os == 'windows-latest'
        working-directory: aseprite/build/bin
        # Use cmd shell for Windows-specific file operations if needed, or bash
        shell: bash
        run: echo '# This file is here so Aseprite behaves as a portable program' > aseprite.ini

      - name: Create release archive
        working-directory: aseprite/build/bin
        # Ensure 7z is in the PATH - brew installs it on macOS, apt installs it on Ubuntu,
        # on Windows, seanmiddleditch/gha-setup-vsdevenv@v1 might include it or you might need
        # a separate step/action to install p7zip if not available.
        run: 7z a Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ matrix.os }}.zip *

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        if: ${{ needs.check-version.outputs.should_build == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.check-version.outputs.upload_url }}
          asset_path: aseprite/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ matrix.os }}.zip
          asset_name: Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ matrix.os }}.zip
          asset_content_type: application/zip