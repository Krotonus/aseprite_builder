name: Build and deploy Aseprite

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - master

env:
  BUILD_TYPE: Release

jobs:
  check-version:
    name: Check latest Aseprite release
    runs-on: ubuntu-latest
    outputs:
      download_url: ${{ steps.version_info.outputs.download_url }}
      latest_tag: ${{ steps.version_info.outputs.latest_tag }}
      should_build: ${{ steps.should_build.outputs.should_build }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Get latest version info
      id: version_info
      run: |
        data=$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/latest)
        LATEST_TAG=$(echo "${data}" | jq -r '.tag_name')
        DOWNLOAD_URL=$(echo "${data}" | jq -r '.assets[0].browser_download_url') # Adjusted to get the first download URL
        VERSION_INFO=$(echo "${data}" | jq -r '.body')

        # Create a file with the latest tag name. This file will be used for caching.
        echo "${LATEST_TAG}" > latest_aseprite_tag.txt

        echo "::set-output name=latest_tag::${LATEST_TAG}"
        echo "::set-output name=download_url::${DOWNLOAD_URL}"
        echo "::set-output name=version_info::${VERSION_INFO}"

    - name: Load version from cache
      id: version_check
      # Use a consistent path for the cache file
      uses: actions/cache@v4 # Updated to v4
      with:
        path: latest_aseprite_tag.txt # Cache the consistent filename
        key: aseprite-cached-version-${{ steps.version_info.outputs.latest_tag }} # Use the tag in the key
        restore-keys: |
          aseprite-cached-version- # Fallback key

    - name: Should we start new build?
      id: should_build
      # If the cache-hit is NOT true, it means this tag hasn't been cached before
      if: steps.version_check.outputs.cache-hit != 'true'
      run: echo "::set-output name=should_build::true"

    - name: Create Release
      id: create_release
      if: steps.should_build.outputs.should_build == 'true' # Ensure condition is checked correctly
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version_info.outputs.latest_tag }}
        release_name: Release Aseprite ${{ steps.version_info.outputs.latest_tag }}
        body: |
          ${{ steps.version_info.outputs.version_info }}
        draft: true
        prerelease: false

  build-aseprite:
    name: Build Aseprite
    needs: check-version
    # Only run this job if the check-version job determined a build is needed
    if: ${{ needs.check-version.outputs.should_build == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
          os: [windows-latest] # Added ubuntu-latest and macOS-latest back for multi-platform build
        fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Good practice to include checkout

      - name: (Windows) Install dependencies
        if: matrix.os == 'windows-latest'
        uses: seanmiddleditch/gha-setup-ninja@v1
      - name: (Ubuntu) Install dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt update && sudo apt install -y cmake ninja-build libxcursor-dev libxi-dev libgl1-mesa-dev
      - name: (macOS) Install dependencies
        if: matrix.os == 'macOS-latest'
        run: brew update && brew install ninja p7zip

      - name: Get Skia from cache
        id: skia-cache
        uses: actions/cache@v4 # Updated to v4
        with:
          path: skia
          key: skia-${{ matrix.os }}-m81-b607b32047 # Include Skia version in key
          restore-keys: |
            skia-${{ matrix.os }}-

      - name: Download Skia if not in cache
        if: steps.skia-cache.outputs.cache-hit != 'true'
        run: |
          curl -o Skia-${{ runner.os }}-Release-X64.zip -L https://github.com/aseprite/skia/releases/download/m81-b607b32047/Skia-${{ runner.os }}-Release-X64.zip
          unzip Skia-${{ runner.os }}-Release-X64.zip -d skia

      - name: Download Aseprite release source
        run: |
          curl -o Aseprite-source.zip -L ${{ needs.check-version.outputs.download_url }}
          unzip Aseprite-source.zip -d aseprite
          mkdir -p aseprite/build

      - name: (Windows) Set architecture for the produced binary
        if: matrix.os == 'windows-latest'
        shell: cmd
        # This might require adjustment based on your VS installation path and version
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64
          # Set environment variables for subsequent steps in the same shell
          echo "::add-path::%VCINSTALLDIR%\bin\HostX64\x64"
          echo "::set-env name=LIB::%LIB%;%VCINSTALLDIR%\lib\x64"
          echo "::set-env name=INCLUDE::%INCLUDE%;%VCINSTALLDIR%\include"


      # The gha-setup-vsdevenv action might be sufficient,
      # consider if the manual step above is still necessary or if it conflicts.
      # - name: (Windows) Setting Visual Studio build environment variables and paths
      #   if: matrix.os == 'windows-latest'
      #   uses: seanmiddleditch/gha-setup-vsdevenv@v1


      - name: Run CMake
        working-directory: aseprite/build
        shell: bash # Use bash for consistency where possible, except for specific cmd needs
        run: |
          # Common CMake command parts
          CMAKE_COMMON_ARGS="-DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DLAF_BACKEND=skia -DSKIA_DIR=../../skia -DSKIA_LIBRARY_DIR=../../skia/out/Release-x64 -G Ninja .."

          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            # Add Windows-specific flags
            cmake ${CMAKE_COMMON_ARGS} -DCMAKE_IGNORE_PATH='C:/ProgramData/chocolatey/bin/;C:/Strawberry/c/bin/'
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            # Add Ubuntu-specific flags
            cmake ${CMAKE_COMMON_ARGS}
          elif [ "${{ matrix.os }}" == "macOS-latest" ]; then
            # Add macOS-specific flags
            cmake ${CMAKE_COMMON_ARGS} -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -DCMAKE_OSX_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk
          fi

      - name: Run Ninja
        working-directory: aseprite/build
        run: ninja aseprite

      - name: Clean up build
        working-directory: aseprite/build/bin
        shell: bash
        run: rm -f gen modp_b64_gen gen.exe gen.exe.manifest modp_b64_gen.exe modp_b64_gen.exe.manifest

      - name: (Windows) Make portable zip
        if: matrix.os == 'windows-latest'
        working-directory: aseprite/build/bin
        run: echo '# This file is here so Aseprite behaves as a portable program' > aseprite.ini

      - name: Create release archive
        working-directory: aseprite/build/bin
        run: 7z a Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip *

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        if: ${{ needs.check-version.outputs.should_build == 'true' }} # Only upload if we created a new release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.check-version.outputs.upload_url }}
          asset_path: aseprite/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip
          asset_name: Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip
          asset_content_type: application/zip